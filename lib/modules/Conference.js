/**
 * @module Modules.Conference
 */

/**
 * @namespace ConferenceEvents
 */

/**
 * Dispatched in case of problems in the conference.
 *
 * @event ConferenceEvents.ConferenceError
 * @name ConferenceEvents.ConferenceError
 *
 * @property {Conference} conference Conference that generated the event
 * @property {string} error Error message
 */

/**
 * Dispatched when the conference started.
 *
 * @event ConferenceEvents.Started
 * @name ConferenceEvents.Started
 *
 * @property {Conference} conference Conference that generated the event
 */

/**
 * Dispatched when the conference stopped
 *
 * @event ConferenceEvents.Stopped
 * @name ConferenceEvents.Stopped
 *
 * @property {Conference} conference Conference that generated the event
 * @property {string} cost Conference cost (ed.: probably it's `number` rather than `string`)
 * @property {string} duration Conference duration (ed.: probably it's `number` rather than `string`)
 */

/**
 * Create new conference.
 *
 * @function VoxEngine.createConference
 *
 * @param {VoxEngine.ConferenceParameters} [params] Conference parameters
 *
 * @return {Conference}
 */

/**
 * Destroy existing conference
 *
 * @function VoxEngine.destroyConference
 *
 * @param {Conference} conf Existing conference
 */

/**
 * @class Conference
 */

/**
 * @callback Conference.eventListener
 *
 * @param {object} event Event listener has been set for
 */

/**
 * Adds handler for specific event generated by Conference
 *
 * @function Conference#addEventListener
 *
 * @param {function} conferenceevent Event class specified in {@link ConferenceEvents}
 * @param {Conference.eventListener} handler Handler function. A single parameter is passed - object with event
 *   information
 */

/**
 * Removes handler for specific event generated by {@link Conference}
 *
 * @function Conference#removeEventListener
 *
 * @param {function} conferenceevent Event class specified in {@link ConferenceEvents}
 * @param {Conference.eventListener} [handler] Handler function. If not specified, all event listeners are removed
 */

/**
 * Start sending media (voice and video) from this conference to media unit specified in `targetMediaUnit`
 *
 * @function Conference#sendMediaTo
 *
 * @param {Call|Conference} targetMediaUnit Media unit that will receive media
 */

/**
 * Stop the conference. Causes {@link ConferenceEvents.Stopped} to be dispatched
 *
 * @function Conference#stop
 */

/**
 * Stop sending media (voice and video) from this conference to media unit specified in `targetMediaUnit`.
 *
 * @function Conference#stopMediaTo
 *
 * @param {Call|Conference} targetMediaUnit Media unit that will not receive media from this conference anymore.
 */
