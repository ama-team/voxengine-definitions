/**
 * @module Modules.Player
 */

/**
 * @namespace PlayerEvents
 */

/**
 * Dispatched when playback has finished successfully or in case of playback error
 *
 * @event PlayerEvents.PlaybackFinished
 * @name PlayerEvents.PlaybackFinished
 *
 * @property {string} error Error message
 * @property {Player} player Player that generated the event
 */

/**
 * Dispatched when playback marker is reached
 *
 * @event PlayerEvents.PlaybackMarkerReached
 * @name PlayerEvents.PlaybackMarkerReached
 *
 * @property {number} offset The marker offset
 * @property {Player} player Player that generated the event
 */

/**
 * Create new audio player with specified text. TTS is used to play this text.
 *
 * Media sinks can later be attached using sendMediaTo() etc.
 *
 * @function VoxEngine.createTTSPlayer
 *
 * @param {string} text Text to say
 * @param {Language} [language] TTS language
 * @param {VoxEngine.TTSOptions} ttsoptions Optional parameters for TTS
 *
 * @return {Player}
 */

/**
 * Create new audio player with specified ToneScript sequence
 *
 * @function VoxEngine.createToneScript
 *
 * @param {string} script ToneScript string
 * @param {boolean} [loop] Looped playback
 *
 * @return {Player}
 */

/**
 * Create new audio player with specified audio file URL.
 *
 * Media sinks can later be attached using `sendMediaTo()` etc.
 *
 * @function VoxEngine.createURLPlayer
 *
 * @param {string} url URL of media file
 * @param {boolean} [loop] Looped playback
 *
 * @return {Player}
 */

/**
 * @class Player
 */

/**
 * @callback Player.eventListener
 */

/**
 * Adds handler for specific event generated by {@link Player}.
 *
 * @function Player#addEventListener
 *
 * @param {function} playerevent Event class from {@link PlayerEvents} (e.g. {@link PlayerEvents.Stopped})
 * @param {Player.eventListener} handler Handler function. A single parameter is passed - object with event information
 */

/**
 * Add playback marker. {@link PlayerEvents.PlaybackMarkerReached} will be dispatched when the marker reached.
 *
 * @function Player#addMarker
 *
 * @param {number} offset Positive/negative offset (ms) from start/end of media.
 */

/**
 * Pause playback
 *
 * @function Player#pause
 */

/**
 * Removes handler for specific event generated by Player
 *
 * @function Player#removeEventListener
 *
 * @param {function} playerevent Event class from {@link PlayerEvents} (e.g. {@link PlayerEvents.Stopped})
 * @param {Player.eventListener} [handler] Handler function. If not specified, all event listeners are removed
 */

/**
 * Resume playback
 *
 * @function Player#resume
 */

/**
 * Start sending media (voice and video) from this call to media unit specified in `targetMediaUnit`. Each call can send
 * media to any number of other calls, but can receive from just one. So if `targetMediaUnit` was already receiving
 * media from another call, that link would break.
 *
 * @function Player#sendMediaTo
 *
 * @param {Call|Conference} targetMediaUnit Media unit that will not receive media from this call anymore.
 */

/**
 * Stop playback.
 *
 * @function Player#stop
 */

/**
 * Stop sending media (voice and video) from this call to media unit specified in `targetMediaUnit`.
 *
 * @function Player#stopMediaTo
 *
 * @param {Call|Conference} targetMediaUnit Media unit that will not receive media from this call anymore.
 */